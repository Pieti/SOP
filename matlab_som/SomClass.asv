%{
compute_input metodi jäi vaiheeseen ( ainakin testaamatta ).

Lisäksi update_weights, get_minimum ovat tärkeitä.
http://mnemstudio.org/ai/nn/som_python_ex2.txt
%}

classdef SomClass
    properties
        mClusters;
        mVectorLength;
        mMinAlpha;
        mDecayRate;
        mReductionPoint;
        mWeightArray;
        mDeltaVector;
        mAlpha;
       
    end
    methods
        % constructor 
        function obj = SomClass(clusters, vectorLength, minAlpha, decayRate, reductionPoint)
            if (nargin == 5)
                obj.mClusters = clusters;
                obj.mVectorLength = vectorLength;
                obj.mMinAlpha = minAlpha;
                obj.mDecayRate = decayRate;
                obj.mReductionPoint = reductionPoint;
                obj.mWeightArray = rand(obj.mClusters, obj.mVectorLength);
                obj.mDeltaVector = zeros(obj.mClusters, 1);
                obj.mAlpha = 0.6; % TODO : Find this out 
            else
            	disp('somclass - wrong argument count');
            end
        end

    % In progress
    function compute_input(obj, vector)
        obj.mDeltaVector = zeros(obj.mClusters, 1);

            for i = 1:obj.mClusters
                for j = 1:obj.mVectorLength
                    obj.mDeltaVector(j) = norm(obj.mWeightArray(i,j),
                %display(obj.mWeightArray(1,:));
                %display(vector);
                obj.mDeltaVector = norm(obj.mWeightArray(i,:), vector); % not sure about mWeigh index TODO : check
            end
    end

    function training(obj, patternArray)
        iterations = 0;
        reductionFlag = false;
        reductionPoint = 0;

        while obj.mAlpha < obj.mMinAlpha
            iterations = iterations + 1;
            for i = 1:size(patternArray, 1)
                obj.compute_input(patternArray, i)
                dMin = obj.get_minimum(obj.DeltaVector);
                obj.update_weights(i, dMin, patternArray)
            end
            % Reduce the learning rate.
            obj.mAlpha = obj.mDecayRate * obj.mAlpha;

            % Reduce radius at specified point.
            if obj.mAlpha < obj.mReductionPoint
                if reductionFlag == false
                    reductionFlag = true;
                    reductionPoint = iterations;
                end
            end
        end

        display(['Iterations: ', num2str(iterations)  ])
        display(['Neighborhood radius reduced after ', num2str(reductionPoint), ' iterations'])

        end   
    end
end